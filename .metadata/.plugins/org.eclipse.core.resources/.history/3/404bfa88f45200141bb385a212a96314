package com.jbs.swipe.states;

import aurelienribon.tweenengine.BaseTween;
import aurelienribon.tweenengine.Tween;
import aurelienribon.tweenengine.TweenCallback;
import aurelienribon.tweenengine.equations.Linear;
import aurelienribon.tweenengine.equations.Quad;

import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.math.Vector2;
import com.jbs.framework.control.Application;
import com.jbs.framework.rendering.Graphic;
import com.jbs.framework.rendering.ui.Button;
import com.jbs.swipe.Game;
import com.jbs.swipe.gui.GraphicAccessor;
import com.jbs.swipe.tiles.Direction;
import com.jbs.swipe.tiles.SwipeTile;
import com.jbs.swipe.tiles.TileAccessor;

public class ArcadeTutorialState extends TutorialState {
	
	private static final String[]
		TIP_SOURCES = new String[] { "assets/GUI/Tutorial/ArcadeMode/Tip0.png", "assets/GUI/Tutorial/ArcadeMode/Tip1.png", "assets/GUI/Tutorial/ArcadeMode/Tip2.png" };
	private static final String
		GOT_IT_PRESSED_SOURCE = "assets/GUI/Tutorial/GotItPressed.png",
		GOT_IT_UNPRESSED_SOURCE = "assets/GUI/Tutorial/GotItUnpressed.png",
		FINGER_SOURCE = "assets/GUI/Loading/Finger.png",
		GAME_OVER_LOGO_SOURCE = "assets/GUI/Font/GameOverMessage.png";
	
	private Graphic[] tips;
	private Button gotItButton;
	
	private SwipeTile[] demoTiles;
	private Graphic finger, gameOverLogo;
	
	private boolean
		demoTilesAreVisible = true,
		fingerIsVisible = true,
		gameOverIsVisible = false;
	
	private final float
		tilesYOffset = 150,
		infinity = 1/0f;
	
	public ArcadeTutorialState(Game game) {
		super(game);
	}
	
	@Override
	public void enterState() {
		super.enterState();
		System.out.println("Entering ArcadeTutorialState.");
		useTip(0);
	}
	
	@Override
	public void exitState() {
		super.exitState();
		super.reset();
		killAllTweens();
	}
	
	@Override
	public void updateApplication(Application app) {
		super.updateApplication(app);
		gotItButton.updateWith(app.input);
	}
	
	@Override
	public void renderTo(SpriteBatch batch) {
		super.renderTo(batch);
		
		if (gameOverIsVisible)
			gameOverLogo.renderTo(batch);
		
		if (demoTilesAreVisible) {
			System.out.println("TopTilePosition : ("+topDemoTile().x()+", "+topDemoTile().y()+")");
			bottomDemoTile().renderTo(batch);
			topDemoTile().renderTo(batch);
			demoTile().renderTo(batch);
		}
		
		if (fingerIsVisible)
			finger.renderTo(batch);
		
		gotItButton.renderTo(batch);
	}
	
	@Override
	Graphic[] tips() {
		return tips;
	}
	
	@Override
	String tutorialName() {
		return "arcadetutorial";
	}
	
	@Override
	void useTip(int tip) {
		if (tip == 0) {
			buildFirstTipScene();
		} else if (tip == 1) {
			buildSecondTipScene(1000f, 1000f, 200);
		} else if (tip == 2) {
			buildThirdTipScene(100, 1000f, 200);
		}
	}
	
	@Override
	protected void create() {
		// Initialize the Tips.
		initializeTips();
		// Initialize the GotIt Button.
		initializeGotItButton();
		
		// Initialize the finger.
		finger = new Graphic(new Vector2(0,0), game.getTexture(FINGER_SOURCE));
		// Initialize the demonstration Tiles.
		demoTiles = new SwipeTile[3];
		for (int i = 0; i != demoTiles.length; i ++) {
			demoTiles[i] = new SwipeTile(game, infinity, Direction.LEFT);
			demoTiles[i].translate(0, tilesYOffset);
		}
		// Initialize the game-over logo.
		gameOverLogo = new Graphic(game.screenCenter(), game.getTexture(GAME_OVER_LOGO_SOURCE));
		gameOverLogo.translate(0, 150);
	}
	
	private void buildFirstTipScene() {
		resetFinger();
		demoTilesAreVisible = true;
		
		final TweenCallback callback = new TweenCallback() {
			@Override
			public void onEvent(int type, BaseTween<?> source) {
				// Change the direction of the demo-Tile.
				demoTile().changeDirection();
				// Move the finger to the center of the demo-Tile.
				finger.setPosition((int) demoTile().x(), (int) demoTile().y());
				
				swipeTileCorrectly(demoTile(), finger, 250f, 1000).setCallback(this);
			}
		};
		
		swipeTileCorrectly(demoTile(), finger, 250f, 1000).setCallback(callback);
	}
	
	private void buildSecondTipScene(final float gameOverTime, final float swipeTime, final float swipeDistance) {
		System.out.println("BUILDING SECOND TIP SCENE");
		resetFinger();
		
		final TweenCallback callback = new TweenCallback() {
			@Override
			public void onEvent(int type, BaseTween<?> source) {
				System.out.println("2: Finger finished swiping, displaying GameOver sign.");
				// Display the game-over logo.
				gameOverIsVisible = true;
				// Hide the finger and demo-Tile.
				fingerIsVisible = false;
				demoTilesAreVisible = false;
				
				final TweenCallback callback = this;
				// After x amount of time, we need to hide the game-over logo and reset
				// the finger swiping animation.
				delayEvent(new TweenCallback() {
					@Override
					public void onEvent(int type, BaseTween<?> source) {
						System.out.println("2: Reseting second tip scene.");
						// Change the demo-Tile's Direction.
						demoTile().changeDirection();
						// Reset the finger.
						resetFinger();
						
						swipeTileIncorrectly(demoTile(), finger, swipeDistance, swipeTime).setCallback(callback).delay(500f);
						
						// Hide the game-over logo.
						gameOverIsVisible = false;
						demoTilesAreVisible = true;
						fingerIsVisible = true;
					}
				}, gameOverTime);
			}
		};
		
		// Change the Direction of the demoTile.
		demoTile().changeDirection();
		
		swipeTileIncorrectly(demoTile(), finger, 250f, 1000).setCallback(callback);
	}
	
	private void buildThirdTipScene(final float tileSpacing, final float swipeDuration, final float swipeDistance) {
		System.out.println("Building third tip scene");
		
		gameOverIsVisible = false;
		demoTilesAreVisible = true;
		fingerIsVisible = true;
		resetFinger();
		game.tweenManager().killAll();
		
		final TweenCallback callback = new TweenCallback() {
			@Override
			public void onEvent(int type, BaseTween<?> source) {
				System.out.println("3: Finger done correctly swiping, creating expansion Tweens.");
				
				final float
					EXPANSION_DURATION = 1000,
					DELAY = 1000f;
				final int TILE_HEIGHT = game.getTexture(demoTile().BLUE_TILE_SOURCE).getHeight();
				
				resetTiles();
				
				
				//moveTile(topDemoTile(), new Vector2(0, TILE_HEIGHT + tileSpacing), EXPANSION_DURATION);
				//moveTile(bottomDemoTile(), new Vector2(0, -(TILE_HEIGHT + tileSpacing)), EXPANSION_DURATION);
				
				// Scale the tiles down to 50% their original size.
				for (int i = 0; i != demoTiles.length; i ++)
					scaleTile(demoTiles[i], .5f, EXPANSION_DURATION);
				
				final TweenCallback callback = this;
				delayEvent(new TweenCallback() {
					@Override
					public void onEvent(int type, BaseTween<?> source) {
						System.out.println("3: Tiles done expanding, reseting then swiping tile correctly");
						resetTiles();
						resetFinger();
						
						swipeTileCorrectly(demoTile(), finger, swipeDistance, swipeDuration)
							.setCallback(callback);
					}
				}, EXPANSION_DURATION + DELAY);
			}
		};
		
		swipeTileCorrectly(demoTile(), finger, swipeDistance, swipeDuration)
			.setCallback(callback);
	}
	
	private void delayEvent(TweenCallback callback, float delay) {
		Tween.call(callback).delay(delay).start(game.tweenManager());
	}
	
	private void initializeTips() {
		tips = new Graphic[3];
		for (int i = 0; i != tips.length; i ++) {
			// Create the tip-Graphic.
			tips[i] = new Graphic(game.screenCenter(), game.getTexture(TIP_SOURCES[i]));
			// Translate the Tip down and to the left.
			tips[i].translate(-tips[i].width()/4, -tips[i].height()/2);
		}
	}
	
	private void initializeGotItButton() {
		gotItButton = new Button(new Vector2(0,0), game.getTexture(GOT_IT_UNPRESSED_SOURCE), game.getTexture(GOT_IT_PRESSED_SOURCE)) {
			@Override
			public int x() {
				return currentTip().x() - texture().getHeight()/2;
			}
			@Override
			public int y() {
				return currentTip().y() - currentTip().height()/2 + texture().getHeight() - 10;
			}
			@Override
			public void onRelease() {
				useNextTip();
			}
		};
	}
	
	private Tween moveTile(SwipeTile tile, Vector2 translation, float duration) {
		return Tween.to(tile, TileAccessor.POSITION_TWEEN, duration)
				.ease(Quad.OUT)
				.target(tile.x() + translation.x, tile.y() + translation.y)
				.start(game.tweenManager());
	}
	
	private Tween swipeTileCorrectly(SwipeTile tile, Graphic finger, float distance, float time) {
		final Vector2 target = getCorrectTileTarget(tile, distance);
		return Tween.to(finger, GraphicAccessor.POSITION_TWEEN, time)
			.target(target.x, target.y)
			.ease(Quad.OUT)
			.start(game.tweenManager());
	}
	
	private Tween swipeTileIncorrectly(SwipeTile tile, Graphic finger, float distance, float time) {
		final Vector2 target = getIncorrectTileTarget(tile, distance);
		return Tween.to(finger, GraphicAccessor.POSITION_TWEEN, time)
			.target(target.x, target.y)
			.ease(Quad.OUT)
			.start(game.tweenManager());
	}
	
	private Vector2 getIncorrectTileTarget(SwipeTile tile, float distance) {
		return new Vector2(tile.x(), tile.y()).add(getTileDirection(tile).mul(-distance));
	}
	
	private Vector2 getCorrectTileTarget(SwipeTile tile, float distance) {
		return getTileDirection(tile).mul(distance).add(tile.x(), tile.y());
	}
	
	private Vector2 getTileDirection(SwipeTile tile) {
		final Vector2 target;
		if (tile.direction() == Direction.RIGHT)
			target = new Vector2(1, 0);
		else if (tile.direction() == Direction.UP)
			target = new Vector2(0, 1);
		else if (tile.direction() == Direction.LEFT)
			target = new Vector2(-1, 0);
		else
			target = new Vector2(0, -1);
		return target;
	}
	
	private Tween scaleTile(SwipeTile tile, float scaleTo, float time) {
		return 	Tween.to(tile, TileAccessor.SCALE_TWEEN, time)
				.ease(Linear.INOUT)
				.target(scaleTo, scaleTo)
				.start(game.tweenManager());
	}
	
	private void killAllTweens() {
		game.tweenManager().killAll();
	}
	
	/**
	 * Set the finger to the center of the screen and kill
	 * all running tweens on the finger.
	 */
	private void resetFinger() {
		fingerIsVisible = true;
		// Kill the finger animation.
		game.tweenManager().killTarget(finger);
		// Move the finger to the center of the demo-Tile.
		finger.setPosition((int) demoTile().x(), (int) demoTile().y());
	}
	
	private void resetTiles() {
		System.out.println("Reseting demo-Tiles");
		for (int i = 0; i != demoTiles.length; i ++) {
			demoTiles[i].setPosition(game.screenCenter());
			demoTiles[i].translate(0, tilesYOffset);
			demoTiles[i].setScale(1, 1);
			game.tweenManager().killTarget(demoTiles[i]);
		}
	}
	
	private SwipeTile demoTile() {
		return demoTiles[1];
	}
	
	private SwipeTile topDemoTile() {
		return demoTiles[2];
	}
	
	private SwipeTile bottomDemoTile() {
		return demoTiles[0];
	}
}